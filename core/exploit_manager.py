import json
import os
from pathlib import Path
from utils.helpers import print_success, print_error, print_status

class ExploitManager:
    def __init__(self, db_path):
        self.db_path = db_path
        self.exploits_file = Path("data/exploits.json")
        self.exploits = self.load_exploits()
        
    def load_exploits(self):
        if self.exploits_file.exists():
            try:
                with open(self.exploits_file, 'r') as f:
                    return json.load(f)
            except:
                return {}
        return {}
        
    def save_exploits(self):
        self.exploits_file.parent.mkdir(exist_ok=True)
        with open(self.exploits_file, 'w') as f:
            json.dump(self.exploits, f, indent=4)
            
    def add_exploit(self, name, description, platform, author, options=None):
        if name in self.exploits:
            print_error(f"Exploit já existe: {name}")
            return False
            
        self.exploits[name] = {
            "description": description,
            "platform": platform,
            "author": author,
            "options": options or {},
            "added_date": os.path.dirname(__file__)
        }
        
        self.save_exploits()
        print_success(f"Exploit adicionado: {name}")
        return True
        
    def remove_exploit(self, name):
        if name in self.exploits:
            del self.exploits[name]
            self.save_exploits()
            print_success(f"Exploit removido: {name}")
            return True
        else:
            print_error(f"Exploit não encontrado: {name}")
            return False
            
    def list_exploits(self, platform=None):
        if not self.exploits:
            print_error("Nenhum exploit disponível")
            return
            
        from rich.console import Console
        from rich.table import Table
        
        console = Console()
        table = Table(title="Exploits Disponíveis")
        table.add_column("Nome", style="cyan")
        table.add_column("Plataforma", style="green")
        table.add_column("Descrição", style="yellow")
        table.add_column("Autor")
        
        for name, exploit in self.exploits.items():
            if platform and exploit['platform'] != platform:
                continue
                
            table.add_row(
                name,
                exploit['platform'],
                exploit['description'][:50] + "..." if len(exploit['description']) > 50 else exploit['description'],
                exploit['author']
            )
            
        console.print(table)
        
    def search_exploits(self, keyword):
        results = {}
        
        for name, exploit in self.exploits.items():
            if (keyword.lower() in name.lower() or 
                keyword.lower() in exploit['description'].lower() or
                keyword.lower() in exploit['platform'].lower()):
                results[name] = exploit
                
        if not results:
            print_error(f"Nenhum exploit encontrado para: {keyword}")
            return
            
        from rich.console import Console
        from rich.table import Table
        
        console = Console()
        table = Table(title=f"Exploits Encontrados para '{keyword}'")
        table.add_column("Nome", style="cyan")
        table.add_column("Plataforma", style="green")
        table.add_column("Descrição", style="yellow")
        
        for name, exploit in results.items():
            table.add_row(
                name,
                exploit['platform'],
                exploit['description'][:50] + "..." if len(exploit['description']) > 50 else exploit['description']
            )
            
        console.print(table)
        
    def get_exploit(self, name):
        return self.exploits.get(name)
