import socket
import subprocess
import sys
from utils.helpers import print_status, print_success, print_error

class ScannerModule:
    def __init__(self):
        self.current_target = None
        self.current_options = {
            "ports": "1-1000",
            "threads": "100",
            "timeout": "1"
        }
        
    def set_target(self, target):
        self.current_target = target
        print_success(f"Target definido: {target}")
        
    def set_option(self, option, value):
        if option in self.current_options:
            self.current_options[option] = value
            print_success(f"{option} => {value}")
        else:
            print_error(f"Opção não reconhecida: {option}")
            
    def run(self):
        if not self.current_target:
            print_error("Nenhum target definido")
            return False
            
        print_status(f"Escaneando {self.current_target}...")
        
        try:
            if "-" in self.current_options["ports"]:
                start_port, end_port = map(int, self.current_options["ports"].split("-"))
                port_list = range(start_port, end_port + 1)
            else:
                port_list = [int(p) for p in self.current_options["ports"].split(",")]
                
            open_ports = self.scan_ports(self.current_target, port_list)
            
            if open_ports:
                print_success(f"Portas abertas em {self.current_target}: {', '.join(map(str, open_ports))}")
            else:
                print_error(f"Nenhuma porta aberta encontrada em {self.current_target}")
                
            return open_ports
            
        except Exception as e:
            print_error(f"Erro no scanner: {e}")
            return []
            
    def scan_ports(self, target, ports):
        import threading
        open_ports = []
        lock = threading.Lock()
        
        def check_port(port):
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(float(self.current_options["timeout"]))
                    result = s.connect_ex((target, port))
                    if result == 0:
                        with lock:
                            open_ports.append(port)
                        print_success(f"Porta {port} aberta")
            except:
                pass
                
        threads = []
        for port in ports:
            thread = threading.Thread(target=check_port, args=(port,))
            thread.daemon = True
            threads.append(thread)
            thread.start()
            
            # Limitar número de threads simultâneas
            while threading.active_count() > int(self.current_options["threads"]):
                time.sleep(0.1)
                
        # Aguardar todas as threads finalizarem
        for thread in threads:
            thread.join()
            
        return sorted(open_ports)
        
    def service_scan(self, target, ports):
        print_status(f"Detectando serviços em {target}...")
        
        try:
            for port in ports:
                try:
                    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                        s.settimeout(2)
                        s.connect((target, port))
                        
                        # Tentar identificar o serviço
                        s.send(b"HEAD / HTTP/1.0\r\n\r\n")
                        banner = s.recv(1024).decode(errors='ignore')
                        
                        if "HTTP" in banner:
                            print_success(f"Porta {port}: Serviço HTTP")
                        elif "SSH" in banner:
                            print_success(f"Porta {port}: Serviço SSH")
                        elif "FTP" in banner:
                            print_success(f"Porta {port}: Serviço FTP")
                        else:
                            print_status(f"Porta {port}: Serviço desconhecido - Banner: {banner[:50]}")
                except:
                    print_status(f"Porta {port}: Não foi possível identificar o serviço")
                    
        except Exception as e:
            print_error(f"Erro no service scan: {e}")
